// Generated by CoffeeScript 1.3.1
(function() {
  var Curl;

  Curl = require("./utils/Curl.js");

  this.Recipe = (function() {

    Recipe.name = 'Recipe';

    function Recipe() {}

    Recipe.socket = null;

    Recipe.domTarget = "";

    Recipe.counter = 0;

    Recipe.completed = false;

    Recipe.req = {
      data: {},
      settings: {
        formatting: {}
      }
    };

    Recipe.inputData = {
      cprList: {}
    };

    Recipe.prototype.renderPreparationResponse = function(req, res, err, callback) {
      console.log("Page loaded");
      this.socket.emit("renderPreparationResponse", {
        req: req,
        err: err,
        res: res,
        domTarget: this.domTarget
      });
      return callback(req);
    };

    Recipe.prototype.getResponse = function(req, res, err, callback) {};

    Recipe.prototype.afterGetResponse = function(cpr, status, html) {
      if (status === "success") {
        this.socket.emit("correctCpr", {
          cpr: cpr,
          html: html
        });
        return this.completed = true;
      } else {
        return this.socket.emit("incorrectCpr", {
          cpr: cpr,
          html: html
        });
      }
    };

    Recipe.prototype.waitForClient = function(name, res, callback) {
      console.log("Waiting for client " + name);
      this.socket.emit("waitForClient", {
        name: name
      });
      return this.socket.once("next", function() {
        return callback(res);
      });
    };

    Recipe.prototype.prepareRequest = function(callback) {
      return callback();
    };

    Recipe.prototype.updateCPR = function() {};

    Recipe.prototype.bruteForce = function() {
      var self;
      self = this;
      return Curl.scrape(this.req, function(req, res, err) {
        return self.getResponse(req, res, err, function(cpr, status, html) {
          console.log("Bruteforcing: " + cpr);
          self.afterGetResponse(cpr, status, html);
          self.counter++;
          self.updateCPR();
          if ((self.inputData.cprList[self.counter] != null) && self.completed !== true) {
            return self.bruteForce();
          }
        });
      });
    };

    return Recipe;

  })();

}).call(this);
