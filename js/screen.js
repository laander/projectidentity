// Generated by CoffeeScript 1.3.1
(function() {
  var addToProgressbar, count, countCompleted, countCprList, cprList, dob, findValidNumbers, recursiveSearch, socket, validateCPR;

  cprList = [];

  countCompleted = 0;

  dob = 0;

  $(document).ready(function() {
    $(".accordion").accordion({
      autoHeight: false,
      collapsible: true
    });
    $("button").button();
    $(".progressbar").progressbar({
      value: 0
    });
    $("#sex").buttonset();
    $("#next").click(function() {
      $("#next").button("disable");
      $("#loading").fadeIn();
      socket.emit("next");
      return console.log("next was clicked");
    });
    return $("#findValidNumbers").click(findValidNumbers);
  });

  findValidNumbers = function() {
    var firstName, gender, lastName, options;
    dob = $("input[name=dob]").val();
    firstName = $("input[name=firstName]").val();
    lastName = $("input[name=lastName]").val();
    gender = $("input[name=gender]:checked").val();
    $("#processFb, #stopTimer, #progressbars, #controllerContainer, #inputData").fadeToggle();
    $("#inputData .content").html("FÃ¸dselsdag: " + dob + "<br> Fornavn: " + firstName + "<br> Efternavn: " + lastName).fadeIn();
    options = [];
    options[0] = [0, 1, 2, 3, 4, 9];
    options[1] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    options[2] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    options[3] = (gender === "male" ? [1, 3, 5, 7, 9] : [0, 2, 4, 6, 8]);
    return recursiveSearch(options, 0, 0, function() {
      console.log(cprList);
      return socket.emit("setInputData", {
        dob: dob,
        firstName: firstName,
        lastName: lastName,
        cprList: cprList
      });
    });
  };

  count = 0;

  recursiveSearch = function(options, number, depth, callback) {
    var cpr, i;
    count++;
    number = number || "";
    depth = depth || 0;
    i = 0;
    while (i < options[depth].length) {
      if (depth + 1 < options.length) {
        recursiveSearch(options, number + options[depth][i], depth + 1, callback);
      } else {
        cpr = number + options[depth][i];
        if (validateCPR(cpr)) {
          cprList.push(cpr);
        }
      }
      i++;
    }
    count--;
    if (count === 0) {
      return callback();
    }
  };

  validateCPR = function(cpr) {
    var factors, fullcpr, i, sum;
    fullcpr = dob + cpr;
    sum = 0;
    factors = [4, 3, 2, 7, 6, 5, 4, 3, 2, 1];
    i = 0;
    while (i < 10) {
      sum += fullcpr.substring(i, i + 1) * factors[i];
      i++;
    }
    if ((sum % 11) !== 0) {
      return false;
    } else {
      return true;
    }
  };

  socket = io.connect();

  socket.socket.on('error', function(reason) {
    return console.error('Unable to connect Socket.IO', reason);
  });

  socket.on('correctCpr', function(data) {
    addToProgressbar();
    $('#correctCpr').fadeIn();
    return $("#correctCpr .content").append(data.cpr + ',').effect('highlight', {
      color: '#E78F08'
    });
  });

  socket.on('incorrectCpr', function(data) {
    addToProgressbar();
    return console.log(data.cpr);
  });

  socket.on('lookupFailed', function(data) {
    addToProgressbar();
    $("#failedCpr").fadeIn();
    return $("#failedCpr .content").append(data.cpr + ', ').effect('highlight', {
      color: '#E78F08'
    });
  });

  countCprList = function() {
    return cprList.length;
  };

  addToProgressbar = function() {
    countCompleted++;
    return $(".progressbar.completed").progressbar("option", "value", countCompleted / countCprList() * 100);
  };

  socket.on("waitForClient", function(data) {
    console.log("server waiting for client: " + data["name"]);
    $("#loading").fadeOut();
    return $("#next").button("enable");
  });

  socket.on("renderResponse", function(data) {
    var body;
    console.log("Data: ");
    console.log(data);
    $(".accordion div").html("");
    if (data.res.body != null) {
      body = $(data.res.body.replace(/<script[\d\D]*?>[\d\D]*?<\/script>/g, ""), "body");
      if (body.find(data.domTarget).length === 0) {
        body.appendTo("#responseBody");
      } else {
        body.find(data.domTarget).appendTo("#responseBody");
      }
    }
    if (data.res.head != null) {
      $("#responseHeader").html(data.res.head.replace(/\n/g, "<br />"));
    }
    $("#errors").html(JSON.stringify(data.err));
    $("#requestHeader").html(JSON.stringify(data.req));
    return $(".accordion").accordion("resize");
  });

}).call(this);
